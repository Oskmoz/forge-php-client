<?php
/**
 * View
 *
 * PHP version 5
 *
 * @category Class
 * @package  Autodesk\Forge\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Forge SDK
 *
 * The Forge Platform contains an expanding collection of web service components that can be used with Autodesk cloud-based products or your own technologies. Take advantage of Autodesk’s expertise in design and engineering.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: forge.help@autodesk.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Autodesk\Forge\Client\Model;

use \ArrayAccess;

/**
 * View Class Doc Comment
 *
 * @category    Class
 * @description user Profile
 * @package     Autodesk\Forge\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class View implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     * @var string
     */
    protected static $swaggerModelName = 'view';

    /**
     * Array of property to type mappings. Used for (de)serialization
     * @var string[]
     */
    protected static $swaggerTypes = [
        'id' => 'string',
        'urn' => 'string',
        'is3d' => 'bool',
        'viewableName' => 'string',
        'viewableId' => 'string',
        'viewableGuid' => 'string',
    ];

    /**
     * @return \string[]
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'urn' => 'urn',
        'is3d' => 'is3d',
        'viewableName' => 'viewableName',
        'viewableId' => 'viewableId',
        'viewableGuid' => 'viewableGuid',
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'urn' => 'setUrn',
        'is3d' => 'setIs3d',
        'viewableName' => 'setViewableName',
        'viewableId' => 'setViewableId',
        'viewableGuid' => 'setViewableGuid',
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'urn' => 'getUrn',
        'is3d' => 'getIs3d',
        'viewableName' => 'getViewableName',
        'viewableId' => 'getViewableId',
        'viewableGuid' => 'getViewableGuid',
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }


    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['urn'] = isset($data['urn']) ? $data['urn'] : null;
        $this->container['is3d'] = isset($data['is3d']) ? $data['is3d'] : null;
        $this->container['viewableName'] = isset($data['viewableName']) ? $data['viewableName'] : null;
        $this->container['viewableId'] = isset($data['viewableId']) ? $data['viewableId'] : null;
        $this->container['viewableGuid'] = isset($data['viewableGuid']) ? $data['viewableGuid'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id The backend user ID of the profile
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets urn
     * @return string
     */
    public function getUrn()
    {
        return $this->container['urn'];
    }

    /**
     * Sets urn
     * @param string $urn The username chosen by the user
     * @return $this
     */
    public function setUrn($urn)
    {
        $this->container['urn'] = $urn;

        return $this;
    }

    /**
     * Gets is3d
     * @return bool
     */
    public function getIs3d()
    {
        return $this->container['is3d'];
    }

    /**
     * Sets is3d
     * @param bool $is3d The user’s email address has been verified or not
     * @return $this
     */
    public function setIs3d($is3d)
    {
        $this->container['is3d'] = $is3d;

        return $this;
    }

    /**
     * Gets viewableName
     * @return string
     */
    public function getViewableName()
    {
        return $this->container['viewableName'];
    }

    /**
     * Sets viewableName
     * @param string $viewableName The username chosen by the user
     * @return $this
     */
    public function setViewableName($viewableName)
    {
        $this->container['viewableName'] = $viewableName;

        return $this;
    }

    /**
     * Gets viewableId
     * @return string
     */
    public function getViewableId()
    {
        return $this->container['viewableId'];
    }

    /**
     * Sets viewableId
     * @param string $viewableId The username chosen by the user
     * @return $this
     */
    public function setViewableId($viewableId)
    {
        $this->container['viewableId'] = $viewableId;

        return $this;
    }

    /**
     * Gets viewableName
     * @return string
     */
    public function getViewableGuid()
    {
        return $this->container['viewableGuid'];
    }

    /**
     * Sets viewableGuid
     * @param string $viewableGuid The username chosen by the user
     * @return $this
     */
    public function setViewableGuid($viewableGuid)
    {
        $this->container['viewableGuid'] = $viewableGuid;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Autodesk\Forge\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Autodesk\Forge\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


